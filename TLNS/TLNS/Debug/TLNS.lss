
TLNS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000bbe  00000c52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00802006  00802006  00000c58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000048d9  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cc8  00000000  00000000  000055e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac8  00000000  00000000  000092a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00009d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ca8  00000000  00000000  00009df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009dc  00000000  00000000  0000ca98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000d474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_66>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__vector_95>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee eb       	ldi	r30, 0xBE	; 190
 21c:	fb e0       	ldi	r31, 0x0B	; 11
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a6 30       	cpi	r26, 0x06	; 6
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a6 e0       	ldi	r26, 0x06	; 6
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a5 31       	cpi	r26, 0x15	; 21
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 8f 03 	call	0x71e	; 0x71e <main>
 244:	0c 94 dd 05 	jmp	0xbba	; 0xbba <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <setup_pins_and_interrupts>:
uint8_t bit_pattern[11] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};



void setup_pins_and_interrupts(void){
	PORTA_DIR = 0x00;
 24c:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	PORTA_PIN7CTRL = PORT_ISC_BOTHEDGES_gc;
 250:	10 92 17 06 	sts	0x0617, r1	; 0x800617 <__TEXT_REGION_LENGTH__+0x700617>
	PORTA_INTCTRL = PORT_INT0LVL_HI_gc;
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <__TEXT_REGION_LENGTH__+0x700609>
	PORTA_INT0MASK = 0x80;	
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
	PORTB_DIR = 0x00;
 260:	10 92 20 06 	sts	0x0620, r1	; 0x800620 <__TEXT_REGION_LENGTH__+0x700620>
	PORTC_DIR = 0x00;
 264:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PORTD_DIR = 0x00;
 268:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	PORTE_DIR = 0x00;
 26c:	10 92 80 06 	sts	0x0680, r1	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
	PORTF_DIR = 0x00;
 270:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
	PORTH_DIR = 0x00;
 274:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <__TEXT_REGION_LENGTH__+0x7006e0>
	PORTJ_DIR = 0x00;
 278:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <__TEXT_REGION_LENGTH__+0x700700>
	PORTK_DIR = 0x00;
 27c:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
	PORTQ_DIR = 0x02;
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7007c0>
	PORTQ_OUT = 0x02;
 286:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <__TEXT_REGION_LENGTH__+0x7007c4>
	PORTQ_PIN0CTRL = PORT_ISC_BOTHEDGES_gc;
 28a:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <__TEXT_REGION_LENGTH__+0x7007d0>
	PORTQ_INTCTRL = PORT_INT1LVL_HI_gc;
 28e:	8c e0       	ldi	r24, 0x0C	; 12
 290:	80 93 c9 07 	sts	0x07C9, r24	; 0x8007c9 <__TEXT_REGION_LENGTH__+0x7007c9>
	PORTQ_INT1MASK = 0x01;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <__TEXT_REGION_LENGTH__+0x7007cb>
	PORTR_DIR = 0x00;
 29a:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7007e0>
	PMIC_CTRL |= PMIC_HILVLEN_bm;	
 29e:	e2 ea       	ldi	r30, 0xA2	; 162
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	84 60       	ori	r24, 0x04	; 4
 2a6:	80 83       	st	Z, r24
 2a8:	08 95       	ret

000002aa <write_bit_pattern>:
}


void write_bit_pattern(void){
	if(global_intensity<5){
 2aa:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <global_intensity>
 2ae:	85 30       	cpi	r24, 0x05	; 5
 2b0:	20 f4       	brcc	.+8      	; 0x2ba <write_bit_pattern+0x10>
		intensity = 1;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <intensity>
 2b8:	12 c0       	rjmp	.+36     	; 0x2de <write_bit_pattern+0x34>
	}else if (global_intensity>=5 && global_intensity<9){
 2ba:	9b ef       	ldi	r25, 0xFB	; 251
 2bc:	98 0f       	add	r25, r24
 2be:	94 30       	cpi	r25, 0x04	; 4
 2c0:	20 f4       	brcc	.+8      	; 0x2ca <write_bit_pattern+0x20>
		intensity = 2;
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <intensity>
 2c8:	0a c0       	rjmp	.+20     	; 0x2de <write_bit_pattern+0x34>
	}else if(global_intensity>=9 && global_intensity<13){
 2ca:	89 50       	subi	r24, 0x09	; 9
 2cc:	84 30       	cpi	r24, 0x04	; 4
 2ce:	20 f4       	brcc	.+8      	; 0x2d8 <write_bit_pattern+0x2e>
		intensity = 3;
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <intensity>
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <write_bit_pattern+0x34>
	}else{
		intensity = 4;
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <intensity>
	}
	
	if(bit_pattern[0] != 0x00){
 2de:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 2e2:	88 23       	and	r24, r24
 2e4:	49 f1       	breq	.+82     	; 0x338 <write_bit_pattern+0x8e>
		PORTA_DIR = 0x7F;
 2e6:	8f e7       	ldi	r24, 0x7F	; 127
 2e8:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
		PORTA_OUT = bit_pattern[0];
 2ec:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 2f0:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
		for(uint8_t i=0; i<intensity; i++){
 2f4:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 2f8:	88 23       	and	r24, r24
 2fa:	51 f0       	breq	.+20     	; 0x310 <write_bit_pattern+0x66>
 2fc:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fe:	96 e0       	ldi	r25, 0x06	; 6
 300:	9a 95       	dec	r25
 302:	f1 f7       	brne	.-4      	; 0x300 <write_bit_pattern+0x56>
 304:	00 c0       	rjmp	.+0      	; 0x306 <write_bit_pattern+0x5c>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 30c:	89 17       	cp	r24, r25
 30e:	b8 f3       	brcs	.-18     	; 0x2fe <write_bit_pattern+0x54>
			_delay_us(10);
		}
		PORTA_OUTTGL = 0x7F;
 310:	8f e7       	ldi	r24, 0x7F	; 127
 312:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x700607>
		for(uint8_t i=0; i<intensity; i++){
 316:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 31a:	88 23       	and	r24, r24
 31c:	51 f0       	breq	.+20     	; 0x332 <write_bit_pattern+0x88>
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	96 e0       	ldi	r25, 0x06	; 6
 322:	9a 95       	dec	r25
 324:	f1 f7       	brne	.-4      	; 0x322 <write_bit_pattern+0x78>
 326:	00 c0       	rjmp	.+0      	; 0x328 <write_bit_pattern+0x7e>
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 32e:	89 17       	cp	r24, r25
 330:	b8 f3       	brcs	.-18     	; 0x320 <write_bit_pattern+0x76>
			_delay_us(10);
		}
		PORTA_DIR = 0x00;			
 332:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
 336:	08 95       	ret
	}else if(bit_pattern[1] != 0x00){
 338:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <__data_end+0x1>
 33c:	88 23       	and	r24, r24
 33e:	49 f1       	breq	.+82     	; 0x392 <write_bit_pattern+0xe8>
		PORTB_DIR = 0xFF;
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <__TEXT_REGION_LENGTH__+0x700620>
		PORTB_OUT = bit_pattern[1];
 346:	80 91 07 20 	lds	r24, 0x2007	; 0x802007 <__data_end+0x1>
 34a:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
		for(uint8_t i=0; i<intensity; i++){
 34e:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 352:	88 23       	and	r24, r24
 354:	51 f0       	breq	.+20     	; 0x36a <write_bit_pattern+0xc0>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	96 e0       	ldi	r25, 0x06	; 6
 35a:	9a 95       	dec	r25
 35c:	f1 f7       	brne	.-4      	; 0x35a <write_bit_pattern+0xb0>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <write_bit_pattern+0xb6>
 360:	8f 5f       	subi	r24, 0xFF	; 255
 362:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 366:	89 17       	cp	r24, r25
 368:	b8 f3       	brcs	.-18     	; 0x358 <write_bit_pattern+0xae>
			_delay_us(10);
		}
		PORTB_OUTTGL = 0xFF;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x700627>
		for(uint8_t i=0; i<intensity; i++){
 370:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 374:	88 23       	and	r24, r24
 376:	51 f0       	breq	.+20     	; 0x38c <write_bit_pattern+0xe2>
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	96 e0       	ldi	r25, 0x06	; 6
 37c:	9a 95       	dec	r25
 37e:	f1 f7       	brne	.-4      	; 0x37c <write_bit_pattern+0xd2>
 380:	00 c0       	rjmp	.+0      	; 0x382 <write_bit_pattern+0xd8>
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 388:	89 17       	cp	r24, r25
 38a:	b8 f3       	brcs	.-18     	; 0x37a <write_bit_pattern+0xd0>
			_delay_us(10);
		}
		PORTB_DIR = 0x00;
 38c:	10 92 20 06 	sts	0x0620, r1	; 0x800620 <__TEXT_REGION_LENGTH__+0x700620>
 390:	08 95       	ret
	}else if(bit_pattern[2] != 0x00){
 392:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <__data_end+0x2>
 396:	88 23       	and	r24, r24
 398:	49 f1       	breq	.+82     	; 0x3ec <write_bit_pattern+0x142>
		PORTC_DIR = 0xFF;
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
		PORTC_OUT = bit_pattern[2];
 3a0:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <__data_end+0x2>
 3a4:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <__TEXT_REGION_LENGTH__+0x700644>
		for(uint8_t i=0; i<intensity; i++){
 3a8:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 3ac:	88 23       	and	r24, r24
 3ae:	51 f0       	breq	.+20     	; 0x3c4 <write_bit_pattern+0x11a>
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	96 e0       	ldi	r25, 0x06	; 6
 3b4:	9a 95       	dec	r25
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <write_bit_pattern+0x10a>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <write_bit_pattern+0x110>
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 3c0:	89 17       	cp	r24, r25
 3c2:	b8 f3       	brcs	.-18     	; 0x3b2 <write_bit_pattern+0x108>
			_delay_us(10);
		}
		PORTC_OUTTGL = 0xFF;
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>
		for(uint8_t i=0; i<intensity; i++){
 3ca:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 3ce:	88 23       	and	r24, r24
 3d0:	51 f0       	breq	.+20     	; 0x3e6 <write_bit_pattern+0x13c>
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	96 e0       	ldi	r25, 0x06	; 6
 3d6:	9a 95       	dec	r25
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <write_bit_pattern+0x12c>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <write_bit_pattern+0x132>
 3dc:	8f 5f       	subi	r24, 0xFF	; 255
 3de:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 3e2:	89 17       	cp	r24, r25
 3e4:	b8 f3       	brcs	.-18     	; 0x3d4 <write_bit_pattern+0x12a>
			_delay_us(10);
		}
		PORTC_DIR = 0x00;
 3e6:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
 3ea:	08 95       	ret
	}else if(bit_pattern[3] != 0x00){
 3ec:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <__data_end+0x3>
 3f0:	88 23       	and	r24, r24
 3f2:	49 f1       	breq	.+82     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		PORTD_DIR = 0xFF;
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
		PORTD_OUT = bit_pattern[3];
 3fa:	80 91 09 20 	lds	r24, 0x2009	; 0x802009 <__data_end+0x3>
 3fe:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <__TEXT_REGION_LENGTH__+0x700664>
		for(uint8_t i=0; i<intensity; i++){
 402:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 406:	88 23       	and	r24, r24
 408:	51 f0       	breq	.+20     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	96 e0       	ldi	r25, 0x06	; 6
 40e:	9a 95       	dec	r25
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 41a:	89 17       	cp	r24, r25
 41c:	b8 f3       	brcs	.-18     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
			_delay_us(10);
		}
		PORTD_OUTTGL = 0xFF;
 41e:	8f ef       	ldi	r24, 0xFF	; 255
 420:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x700667>
		for(uint8_t i=0; i<intensity; i++){
 424:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 428:	88 23       	and	r24, r24
 42a:	51 f0       	breq	.+20     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	96 e0       	ldi	r25, 0x06	; 6
 430:	9a 95       	dec	r25
 432:	f1 f7       	brne	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 436:	8f 5f       	subi	r24, 0xFF	; 255
 438:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 43c:	89 17       	cp	r24, r25
 43e:	b8 f3       	brcs	.-18     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			_delay_us(10);
		}
		PORTD_DIR = 0x00;
 440:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
 444:	08 95       	ret
	}else if(bit_pattern[4] != 0x00){
 446:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <__data_end+0x4>
 44a:	88 23       	and	r24, r24
 44c:	49 f1       	breq	.+82     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		PORTE_DIR = 0xFF;
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
		PORTE_OUT = bit_pattern[4];
 454:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <__data_end+0x4>
 458:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <__TEXT_REGION_LENGTH__+0x700684>
		for(uint8_t i=0; i<intensity; i++){
 45c:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 460:	88 23       	and	r24, r24
 462:	51 f0       	breq	.+20     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	96 e0       	ldi	r25, 0x06	; 6
 468:	9a 95       	dec	r25
 46a:	f1 f7       	brne	.-4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 474:	89 17       	cp	r24, r25
 476:	b8 f3       	brcs	.-18     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
			_delay_us(10);
		}
		PORTE_OUTTGL = 0xFF;
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <__TEXT_REGION_LENGTH__+0x700687>
		for(uint8_t i=0; i<intensity; i++){
 47e:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 482:	88 23       	and	r24, r24
 484:	51 f0       	breq	.+20     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	96 e0       	ldi	r25, 0x06	; 6
 48a:	9a 95       	dec	r25
 48c:	f1 f7       	brne	.-4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 490:	8f 5f       	subi	r24, 0xFF	; 255
 492:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 496:	89 17       	cp	r24, r25
 498:	b8 f3       	brcs	.-18     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
			_delay_us(10);
		}
		PORTE_DIR = 0x00;
 49a:	10 92 80 06 	sts	0x0680, r1	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
 49e:	08 95       	ret
	}else if(bit_pattern[5] != 0x00){
 4a0:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <__data_end+0x5>
 4a4:	88 23       	and	r24, r24
 4a6:	49 f1       	breq	.+82     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
		PORTF_DIR = 0xFF;
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
		PORTF_OUT = bit_pattern[5];
 4ae:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <__data_end+0x5>
 4b2:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <__TEXT_REGION_LENGTH__+0x7006a4>
		for(uint8_t i=0; i<intensity; i++){
 4b6:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 4ba:	88 23       	and	r24, r24
 4bc:	51 f0       	breq	.+20     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	96 e0       	ldi	r25, 0x06	; 6
 4c2:	9a 95       	dec	r25
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c8:	8f 5f       	subi	r24, 0xFF	; 255
 4ca:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 4ce:	89 17       	cp	r24, r25
 4d0:	b8 f3       	brcs	.-18     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			_delay_us(10);
		}
		PORTF_OUTTGL = 0xFF;
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <__TEXT_REGION_LENGTH__+0x7006a7>
		for(uint8_t i=0; i<intensity; i++){
 4d8:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 4dc:	88 23       	and	r24, r24
 4de:	51 f0       	breq	.+20     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	96 e0       	ldi	r25, 0x06	; 6
 4e4:	9a 95       	dec	r25
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4ea:	8f 5f       	subi	r24, 0xFF	; 255
 4ec:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 4f0:	89 17       	cp	r24, r25
 4f2:	b8 f3       	brcs	.-18     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			_delay_us(10);
		}
		PORTF_DIR = 0x00;
 4f4:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
 4f8:	08 95       	ret
	}else if(bit_pattern[6] != 0x00){
 4fa:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <__data_end+0x6>
 4fe:	88 23       	and	r24, r24
 500:	49 f1       	breq	.+82     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
		PORTH_DIR = 0xFF;
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <__TEXT_REGION_LENGTH__+0x7006e0>
		PORTH_OUT = bit_pattern[6];
 508:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <__data_end+0x6>
 50c:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <__TEXT_REGION_LENGTH__+0x7006e4>
		for(uint8_t i=0; i<intensity; i++){
 510:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 514:	88 23       	and	r24, r24
 516:	51 f0       	breq	.+20     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	96 e0       	ldi	r25, 0x06	; 6
 51c:	9a 95       	dec	r25
 51e:	f1 f7       	brne	.-4      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 520:	00 c0       	rjmp	.+0      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 522:	8f 5f       	subi	r24, 0xFF	; 255
 524:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 528:	89 17       	cp	r24, r25
 52a:	b8 f3       	brcs	.-18     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
			_delay_us(10);
		}
		PORTH_OUTTGL = 0xFF;
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	80 93 e7 06 	sts	0x06E7, r24	; 0x8006e7 <__TEXT_REGION_LENGTH__+0x7006e7>
		for(uint8_t i=0; i<intensity; i++){
 532:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 536:	88 23       	and	r24, r24
 538:	51 f0       	breq	.+20     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	96 e0       	ldi	r25, 0x06	; 6
 53e:	9a 95       	dec	r25
 540:	f1 f7       	brne	.-4      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 542:	00 c0       	rjmp	.+0      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 54a:	89 17       	cp	r24, r25
 54c:	b8 f3       	brcs	.-18     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
			_delay_us(10);
		}
		PORTH_DIR = 0x00;
 54e:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <__TEXT_REGION_LENGTH__+0x7006e0>
 552:	08 95       	ret
	}else if(bit_pattern[7] != 0x00){
 554:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <__data_end+0x7>
 558:	88 23       	and	r24, r24
 55a:	49 f1       	breq	.+82     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
		PORTJ_DIR = 0xFF;
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <__TEXT_REGION_LENGTH__+0x700700>
		PORTJ_OUT = bit_pattern[7];
 562:	80 91 0d 20 	lds	r24, 0x200D	; 0x80200d <__data_end+0x7>
 566:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <__TEXT_REGION_LENGTH__+0x700704>
		for(uint8_t i=0; i<intensity; i++){
 56a:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 56e:	88 23       	and	r24, r24
 570:	51 f0       	breq	.+20     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	96 e0       	ldi	r25, 0x06	; 6
 576:	9a 95       	dec	r25
 578:	f1 f7       	brne	.-4      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 582:	89 17       	cp	r24, r25
 584:	b8 f3       	brcs	.-18     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
			_delay_us(10);
		}
		PORTJ_OUTTGL = 0xFF;
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <__TEXT_REGION_LENGTH__+0x700707>
		for(uint8_t i=0; i<intensity; i++){
 58c:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 590:	88 23       	and	r24, r24
 592:	51 f0       	breq	.+20     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	96 e0       	ldi	r25, 0x06	; 6
 598:	9a 95       	dec	r25
 59a:	f1 f7       	brne	.-4      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 59e:	8f 5f       	subi	r24, 0xFF	; 255
 5a0:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 5a4:	89 17       	cp	r24, r25
 5a6:	b8 f3       	brcs	.-18     	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
			_delay_us(10);
		}
		PORTJ_DIR = 0x00;
 5a8:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <__TEXT_REGION_LENGTH__+0x700700>
 5ac:	08 95       	ret
	}else if(bit_pattern[8] != 0x00){
 5ae:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <__data_end+0x8>
 5b2:	88 23       	and	r24, r24
 5b4:	49 f1       	breq	.+82     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
		PORTK_DIR = 0xFF;
 5b6:	8f ef       	ldi	r24, 0xFF	; 255
 5b8:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
		PORTK_OUT = bit_pattern[8];
 5bc:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <__data_end+0x8>
 5c0:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <__TEXT_REGION_LENGTH__+0x700724>
		for(uint8_t i=0; i<intensity; i++){
 5c4:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 5c8:	88 23       	and	r24, r24
 5ca:	51 f0       	breq	.+20     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	96 e0       	ldi	r25, 0x06	; 6
 5d0:	9a 95       	dec	r25
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d6:	8f 5f       	subi	r24, 0xFF	; 255
 5d8:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 5dc:	89 17       	cp	r24, r25
 5de:	b8 f3       	brcs	.-18     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
			_delay_us(10);
		}
		PORTK_OUTTGL = 0xFF;
 5e0:	8f ef       	ldi	r24, 0xFF	; 255
 5e2:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <__TEXT_REGION_LENGTH__+0x700727>
		for(uint8_t i=0; i<intensity; i++){
 5e6:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 5ea:	88 23       	and	r24, r24
 5ec:	51 f0       	breq	.+20     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	96 e0       	ldi	r25, 0x06	; 6
 5f2:	9a 95       	dec	r25
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f8:	8f 5f       	subi	r24, 0xFF	; 255
 5fa:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 5fe:	89 17       	cp	r24, r25
 600:	b8 f3       	brcs	.-18     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
			_delay_us(10);
		}
		PORTK_DIR = 0x00;
 602:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
 606:	08 95       	ret
	}else if(bit_pattern[9] != 0x00){
 608:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <__data_end+0x9>
 60c:	88 23       	and	r24, r24
 60e:	61 f1       	breq	.+88     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
		PORTQ_DIR = 0xFE;
 610:	8e ef       	ldi	r24, 0xFE	; 254
 612:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7007c0>
		PORTQ_OUT = bit_pattern[9];
 616:	80 91 0f 20 	lds	r24, 0x200F	; 0x80200f <__data_end+0x9>
 61a:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <__TEXT_REGION_LENGTH__+0x7007c4>
		for(uint8_t i=0; i<intensity; i++){
 61e:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 622:	88 23       	and	r24, r24
 624:	51 f0       	breq	.+20     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	96 e0       	ldi	r25, 0x06	; 6
 62a:	9a 95       	dec	r25
 62c:	f1 f7       	brne	.-4      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 630:	8f 5f       	subi	r24, 0xFF	; 255
 632:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 636:	89 17       	cp	r24, r25
 638:	b8 f3       	brcs	.-18     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
			_delay_us(10);
		}
		PORTQ_OUTTGL = 0xFF;
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <__TEXT_REGION_LENGTH__+0x7007c7>
		for(uint8_t i=0; i<intensity; i++){
 640:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 644:	88 23       	and	r24, r24
 646:	51 f0       	breq	.+20     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	96 e0       	ldi	r25, 0x06	; 6
 64c:	9a 95       	dec	r25
 64e:	f1 f7       	brne	.-4      	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 650:	00 c0       	rjmp	.+0      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 652:	8f 5f       	subi	r24, 0xFF	; 255
 654:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 658:	89 17       	cp	r24, r25
 65a:	b8 f3       	brcs	.-18     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
			_delay_us(10);
		}
		PORTQ_DIR = 0x02;
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7007c0>
		PORTQ_OUTSET = 0x02;
 662:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
 666:	08 95       	ret
	}else if(bit_pattern[10] != 0x00){
 668:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <__data_end+0xa>
 66c:	88 23       	and	r24, r24
 66e:	41 f1       	breq	.+80     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
		PORTR_DIR = 0xFF;
 670:	8f ef       	ldi	r24, 0xFF	; 255
 672:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7007e0>
		PORTR_OUT = bit_pattern[10];
 676:	80 91 10 20 	lds	r24, 0x2010	; 0x802010 <__data_end+0xa>
 67a:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <__TEXT_REGION_LENGTH__+0x7007e4>
		for(uint8_t i=0; i<intensity; i++){
 67e:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 682:	88 23       	and	r24, r24
 684:	51 f0       	breq	.+20     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	96 e0       	ldi	r25, 0x06	; 6
 68a:	9a 95       	dec	r25
 68c:	f1 f7       	brne	.-4      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 690:	8f 5f       	subi	r24, 0xFF	; 255
 692:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 696:	89 17       	cp	r24, r25
 698:	b8 f3       	brcs	.-18     	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
			_delay_us(10);
		}
		PORTR_OUTTGL = 0xFF;
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	80 93 e7 07 	sts	0x07E7, r24	; 0x8007e7 <__TEXT_REGION_LENGTH__+0x7007e7>
		for(uint8_t i=0; i<intensity; i++){
 6a0:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <intensity>
 6a4:	88 23       	and	r24, r24
 6a6:	51 f0       	breq	.+20     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	96 e0       	ldi	r25, 0x06	; 6
 6ac:	9a 95       	dec	r25
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
 6b2:	8f 5f       	subi	r24, 0xFF	; 255
 6b4:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <intensity>
 6b8:	89 17       	cp	r24, r25
 6ba:	b8 f3       	brcs	.-18     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
			_delay_us(10);
		}
		PORTR_DIR = 0x00;
 6bc:	10 92 e0 07 	sts	0x07E0, r1	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7007e0>
 6c0:	08 95       	ret

000006c2 <__vector_66>:
	}
}



ISR(PORTA_INT0_vect){ //if switch K2 pressed
 6c2:	1f 92       	push	r1
 6c4:	0f 92       	push	r0
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	0f 92       	push	r0
 6ca:	11 24       	eor	r1, r1
 6cc:	08 b6       	in	r0, 0x38	; 56
 6ce:	0f 92       	push	r0
 6d0:	18 be       	out	0x38, r1	; 56
	k1held = 0;
 6d2:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <k1held>
 6d6:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <k1held+0x1>
	k2held = 0;
 6da:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <k2held>
 6de:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <k2held+0x1>
}
 6e2:	0f 90       	pop	r0
 6e4:	08 be       	out	0x38, r0	; 56
 6e6:	0f 90       	pop	r0
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	0f 90       	pop	r0
 6ec:	1f 90       	pop	r1
 6ee:	18 95       	reti

000006f0 <__vector_95>:

ISR(PORTQ_INT1_vect){ //if switch K1 pressed
 6f0:	1f 92       	push	r1
 6f2:	0f 92       	push	r0
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	0f 92       	push	r0
 6f8:	11 24       	eor	r1, r1
 6fa:	08 b6       	in	r0, 0x38	; 56
 6fc:	0f 92       	push	r0
 6fe:	18 be       	out	0x38, r1	; 56
	k1held = 0;
 700:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <k1held>
 704:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <k1held+0x1>
	k2held = 0;
 708:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <k2held>
 70c:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <k2held+0x1>
}
 710:	0f 90       	pop	r0
 712:	08 be       	out	0x38, r0	; 56
 714:	0f 90       	pop	r0
 716:	0f be       	out	0x3f, r0	; 63
 718:	0f 90       	pop	r0
 71a:	1f 90       	pop	r1
 71c:	18 95       	reti

0000071e <main>:



int main(void){
	setup_pins_and_interrupts();
 71e:	0e 94 26 01 	call	0x24c	; 0x24c <setup_pins_and_interrupts>
 722:	01 e1       	ldi	r16, 0x11	; 17
 724:	10 e2       	ldi	r17, 0x20	; 32
		for(uint8_t i=0;i<11;i++){
			bit_pattern[i] = 0x00; //zero out the whole bit pattern
		}
 	 //set random bit somewhere in the array
		uint8_t whichbyte = 0;
		whichbyte = rand() % 10;
 726:	0f 2e       	mov	r0, r31
 728:	fa e0       	ldi	r31, 0x0A	; 10
 72a:	4f 2e       	mov	r4, r31
 72c:	51 2c       	mov	r5, r1
 72e:	f0 2d       	mov	r31, r0
				bit_pattern[rand() % 9] = (0x40 >> (rand() % 7));
			}else{
				if(rand() % 2 == 1){
					bit_pattern[9] = (0x08 >> (rand() % 2));
				}else{
					bit_pattern[10] = (0x02 >> (rand() % 2));
 730:	0f 2e       	mov	r0, r31
 732:	f6 e0       	ldi	r31, 0x06	; 6
 734:	8f 2e       	mov	r8, r31
 736:	f0 e2       	ldi	r31, 0x20	; 32
 738:	9f 2e       	mov	r9, r31
 73a:	f0 2d       	mov	r31, r0
 73c:	68 94       	set
 73e:	66 24       	eor	r6, r6
 740:	61 f8       	bld	r6, 1
 742:	71 2c       	mov	r7, r1
		}else{//(if whichbyte == 9)
			if(rand() % 2 == 1){
				bit_pattern[rand() % 9] = (0x40 >> (rand() % 7));
			}else{
				if(rand() % 2 == 1){
					bit_pattern[9] = (0x08 >> (rand() % 2));
 744:	68 94       	set
 746:	22 24       	eor	r2, r2
 748:	23 f8       	bld	r2, 3
 74a:	31 2c       	mov	r3, r1
			bit_pattern[whichbyte] = (0x40 >> (rand() % 7));
		}else if(whichbyte > 0 && whichbyte < 9){
			bit_pattern[whichbyte] = (0x80 >> (rand() % 8));
		}else{//(if whichbyte == 9)
			if(rand() % 2 == 1){
				bit_pattern[rand() % 9] = (0x40 >> (rand() % 7));
 74c:	68 94       	set
 74e:	aa 24       	eor	r10, r10
 750:	a6 f8       	bld	r10, 6
 752:	b1 2c       	mov	r11, r1
		//delay 1200us - 20*intensity (delay window shrinks as intensity is increased)
		for(uint8_t i=0;i<(120-6*global_intensity);i++){
			_delay_us(10);
		}
	
		if((PORTQ_IN & 0x01) == 0){ //if switch K1 pressed
 754:	c8 ec       	ldi	r28, 0xC8	; 200
 756:	d7 e0       	ldi	r29, 0x07	; 7
			}
		}else{
			k1held = 0;	
		}			
			
		if((PORTA_IN & 0x80) == 0){ //if switch K2 pressed
 758:	0f 2e       	mov	r0, r31
 75a:	f8 e0       	ldi	r31, 0x08	; 8
 75c:	ef 2e       	mov	r14, r31
 75e:	f6 e0       	ldi	r31, 0x06	; 6
 760:	ff 2e       	mov	r15, r31
 762:	f0 2d       	mov	r31, r0
 764:	e6 e0       	ldi	r30, 0x06	; 6
 766:	f0 e2       	ldi	r31, 0x20	; 32

int main(void){
	setup_pins_and_interrupts();
	while(1){ //main loop
		for(uint8_t i=0;i<11;i++){
			bit_pattern[i] = 0x00; //zero out the whole bit pattern
 768:	11 92       	st	Z+, r1


int main(void){
	setup_pins_and_interrupts();
	while(1){ //main loop
		for(uint8_t i=0;i<11;i++){
 76a:	0e 17       	cp	r16, r30
 76c:	1f 07       	cpc	r17, r31
 76e:	e1 f7       	brne	.-8      	; 0x768 <main+0x4a>
			bit_pattern[i] = 0x00; //zero out the whole bit pattern
		}
 	 //set random bit somewhere in the array
		uint8_t whichbyte = 0;
		whichbyte = rand() % 10;
 770:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rand>
 774:	b2 01       	movw	r22, r4
 776:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__divmodhi4>
 77a:	6c 01       	movw	r12, r24
		if(whichbyte == 0){
 77c:	81 11       	cpse	r24, r1
 77e:	12 c0       	rjmp	.+36     	; 0x7a4 <main+0x86>
			bit_pattern[whichbyte] = (0x40 >> (rand() % 7));
 780:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rand>
 784:	f6 01       	movw	r30, r12
 786:	ff 27       	eor	r31, r31
 788:	ea 5f       	subi	r30, 0xFA	; 250
 78a:	ff 4d       	sbci	r31, 0xDF	; 223
 78c:	67 e0       	ldi	r22, 0x07	; 7
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__divmodhi4>
 794:	95 01       	movw	r18, r10
 796:	02 c0       	rjmp	.+4      	; 0x79c <main+0x7e>
 798:	35 95       	asr	r19
 79a:	27 95       	ror	r18
 79c:	8a 95       	dec	r24
 79e:	e2 f7       	brpl	.-8      	; 0x798 <main+0x7a>
 7a0:	20 83       	st	Z, r18
 7a2:	74 c0       	rjmp	.+232    	; 0x88c <main+0x16e>
		}else if(whichbyte > 0 && whichbyte < 9){
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	8c 0d       	add	r24, r12
 7a8:	88 30       	cpi	r24, 0x08	; 8
 7aa:	c0 f4       	brcc	.+48     	; 0x7dc <main+0xbe>
			bit_pattern[whichbyte] = (0x80 >> (rand() % 8));
 7ac:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rand>
 7b0:	f6 01       	movw	r30, r12
 7b2:	ff 27       	eor	r31, r31
 7b4:	ea 5f       	subi	r30, 0xFA	; 250
 7b6:	ff 4d       	sbci	r31, 0xDF	; 223
 7b8:	87 70       	andi	r24, 0x07	; 7
 7ba:	90 78       	andi	r25, 0x80	; 128
 7bc:	99 23       	and	r25, r25
 7be:	24 f4       	brge	.+8      	; 0x7c8 <main+0xaa>
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	88 6f       	ori	r24, 0xF8	; 248
 7c4:	9f 6f       	ori	r25, 0xFF	; 255
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	20 e8       	ldi	r18, 0x80	; 128
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	a9 01       	movw	r20, r18
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <main+0xb6>
 7d0:	55 95       	asr	r21
 7d2:	47 95       	ror	r20
 7d4:	8a 95       	dec	r24
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <main+0xb2>
 7d8:	40 83       	st	Z, r20
 7da:	58 c0       	rjmp	.+176    	; 0x88c <main+0x16e>
		}else{//(if whichbyte == 9)
			if(rand() % 2 == 1){
 7dc:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rand>
 7e0:	81 70       	andi	r24, 0x01	; 1
 7e2:	90 78       	andi	r25, 0x80	; 128
 7e4:	99 23       	and	r25, r25
 7e6:	24 f4       	brge	.+8      	; 0x7f0 <main+0xd2>
 7e8:	01 97       	sbiw	r24, 0x01	; 1
 7ea:	8e 6f       	ori	r24, 0xFE	; 254
 7ec:	9f 6f       	ori	r25, 0xFF	; 255
 7ee:	01 96       	adiw	r24, 0x01	; 1
 7f0:	01 97       	sbiw	r24, 0x01	; 1
 7f2:	d9 f4       	brne	.+54     	; 0x82a <main+0x10c>
				bit_pattern[rand() % 9] = (0x40 >> (rand() % 7));
 7f4:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rand>
 7f8:	6c 01       	movw	r12, r24
 7fa:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rand>
 7fe:	9c 01       	movw	r18, r24
 800:	c6 01       	movw	r24, r12
 802:	69 e0       	ldi	r22, 0x09	; 9
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__divmodhi4>
 80a:	fc 01       	movw	r30, r24
 80c:	ea 5f       	subi	r30, 0xFA	; 250
 80e:	ff 4d       	sbci	r31, 0xDF	; 223
 810:	c9 01       	movw	r24, r18
 812:	67 e0       	ldi	r22, 0x07	; 7
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__divmodhi4>
 81a:	95 01       	movw	r18, r10
 81c:	02 c0       	rjmp	.+4      	; 0x822 <main+0x104>
 81e:	35 95       	asr	r19
 820:	27 95       	ror	r18
 822:	8a 95       	dec	r24
 824:	e2 f7       	brpl	.-8      	; 0x81e <main+0x100>
 826:	20 83       	st	Z, r18
 828:	31 c0       	rjmp	.+98     	; 0x88c <main+0x16e>
			}else{
				if(rand() % 2 == 1){
 82a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rand>
 82e:	81 70       	andi	r24, 0x01	; 1
 830:	90 78       	andi	r25, 0x80	; 128
 832:	99 23       	and	r25, r25
 834:	24 f4       	brge	.+8      	; 0x83e <main+0x120>
 836:	01 97       	sbiw	r24, 0x01	; 1
 838:	8e 6f       	ori	r24, 0xFE	; 254
 83a:	9f 6f       	ori	r25, 0xFF	; 255
 83c:	01 96       	adiw	r24, 0x01	; 1
 83e:	01 97       	sbiw	r24, 0x01	; 1
 840:	99 f4       	brne	.+38     	; 0x868 <main+0x14a>
					bit_pattern[9] = (0x08 >> (rand() % 2));
 842:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rand>
 846:	81 70       	andi	r24, 0x01	; 1
 848:	90 78       	andi	r25, 0x80	; 128
 84a:	99 23       	and	r25, r25
 84c:	24 f4       	brge	.+8      	; 0x856 <main+0x138>
 84e:	01 97       	sbiw	r24, 0x01	; 1
 850:	8e 6f       	ori	r24, 0xFE	; 254
 852:	9f 6f       	ori	r25, 0xFF	; 255
 854:	01 96       	adiw	r24, 0x01	; 1
 856:	a1 01       	movw	r20, r2
 858:	02 c0       	rjmp	.+4      	; 0x85e <main+0x140>
 85a:	55 95       	asr	r21
 85c:	47 95       	ror	r20
 85e:	8a 95       	dec	r24
 860:	e2 f7       	brpl	.-8      	; 0x85a <main+0x13c>
 862:	f4 01       	movw	r30, r8
 864:	41 87       	std	Z+9, r20	; 0x09
 866:	12 c0       	rjmp	.+36     	; 0x88c <main+0x16e>
				}else{
					bit_pattern[10] = (0x02 >> (rand() % 2));
 868:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <rand>
 86c:	81 70       	andi	r24, 0x01	; 1
 86e:	90 78       	andi	r25, 0x80	; 128
 870:	99 23       	and	r25, r25
 872:	24 f4       	brge	.+8      	; 0x87c <main+0x15e>
 874:	01 97       	sbiw	r24, 0x01	; 1
 876:	8e 6f       	ori	r24, 0xFE	; 254
 878:	9f 6f       	ori	r25, 0xFF	; 255
 87a:	01 96       	adiw	r24, 0x01	; 1
 87c:	93 01       	movw	r18, r6
 87e:	02 c0       	rjmp	.+4      	; 0x884 <main+0x166>
 880:	35 95       	asr	r19
 882:	27 95       	ror	r18
 884:	8a 95       	dec	r24
 886:	e2 f7       	brpl	.-8      	; 0x880 <main+0x162>
 888:	f4 01       	movw	r30, r8
 88a:	22 87       	std	Z+10, r18	; 0x0a
				}
			}
		}
		write_bit_pattern();
 88c:	0e 94 55 01 	call	0x2aa	; 0x2aa <write_bit_pattern>
		//delay 1200us - 20*intensity (delay window shrinks as intensity is increased)
		for(uint8_t i=0;i<(120-6*global_intensity);i++){
 890:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <global_intensity>
 894:	2a ef       	ldi	r18, 0xFA	; 250
 896:	24 03       	mulsu	r18, r20
 898:	c0 01       	movw	r24, r0
 89a:	11 24       	eor	r1, r1
 89c:	88 58       	subi	r24, 0x88	; 136
 89e:	9f 4f       	sbci	r25, 0xFF	; 255
 8a0:	18 16       	cp	r1, r24
 8a2:	19 06       	cpc	r1, r25
 8a4:	9c f4       	brge	.+38     	; 0x8cc <main+0x1ae>
 8a6:	20 e0       	ldi	r18, 0x00	; 0
 8a8:	3a ef       	ldi	r19, 0xFA	; 250
 8aa:	46 e0       	ldi	r20, 0x06	; 6
 8ac:	4a 95       	dec	r20
 8ae:	f1 f7       	brne	.-4      	; 0x8ac <main+0x18e>
 8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <main+0x194>
 8b2:	2f 5f       	subi	r18, 0xFF	; 255
 8b4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <global_intensity>
 8b8:	62 2f       	mov	r22, r18
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	34 03       	mulsu	r19, r20
 8be:	c0 01       	movw	r24, r0
 8c0:	11 24       	eor	r1, r1
 8c2:	88 58       	subi	r24, 0x88	; 136
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	68 17       	cp	r22, r24
 8c8:	79 07       	cpc	r23, r25
 8ca:	7c f3       	brlt	.-34     	; 0x8aa <main+0x18c>
			_delay_us(10);
		}
	
		if((PORTQ_IN & 0x01) == 0){ //if switch K1 pressed
 8cc:	88 81       	ld	r24, Y
 8ce:	80 fd       	sbrc	r24, 0
 8d0:	24 c0       	rjmp	.+72     	; 0x91a <main+0x1fc>
			k1held++;
 8d2:	e0 91 13 20 	lds	r30, 0x2013	; 0x802013 <k1held>
 8d6:	f0 91 14 20 	lds	r31, 0x2014	; 0x802014 <k1held+0x1>
 8da:	31 96       	adiw	r30, 0x01	; 1
 8dc:	e0 93 13 20 	sts	0x2013, r30	; 0x802013 <k1held>
 8e0:	f0 93 14 20 	sts	0x2014, r31	; 0x802014 <k1held+0x1>
			if(k1held%20 == 1 && global_intensity < 20){
 8e4:	9f 01       	movw	r18, r30
 8e6:	ad ec       	ldi	r26, 0xCD	; 205
 8e8:	bc ec       	ldi	r27, 0xCC	; 204
 8ea:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 8ee:	92 95       	swap	r25
 8f0:	82 95       	swap	r24
 8f2:	8f 70       	andi	r24, 0x0F	; 15
 8f4:	89 27       	eor	r24, r25
 8f6:	9f 70       	andi	r25, 0x0F	; 15
 8f8:	89 27       	eor	r24, r25
 8fa:	54 e1       	ldi	r21, 0x14	; 20
 8fc:	58 9f       	mul	r21, r24
 8fe:	90 01       	movw	r18, r0
 900:	59 9f       	mul	r21, r25
 902:	30 0d       	add	r19, r0
 904:	11 24       	eor	r1, r1
 906:	e2 1b       	sub	r30, r18
 908:	f3 0b       	sbc	r31, r19
 90a:	31 97       	sbiw	r30, 0x01	; 1
 90c:	51 f4       	brne	.+20     	; 0x922 <main+0x204>
 90e:	44 31       	cpi	r20, 0x14	; 20
 910:	40 f4       	brcc	.+16     	; 0x922 <main+0x204>
				global_intensity++;
 912:	4f 5f       	subi	r20, 0xFF	; 255
 914:	40 93 04 20 	sts	0x2004, r20	; 0x802004 <global_intensity>
 918:	04 c0       	rjmp	.+8      	; 0x922 <main+0x204>
			}
		}else{
			k1held = 0;	
 91a:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <k1held>
 91e:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <k1held+0x1>
		}			
			
		if((PORTA_IN & 0x80) == 0){ //if switch K2 pressed
 922:	f7 01       	movw	r30, r14
 924:	80 81       	ld	r24, Z
 926:	88 23       	and	r24, r24
 928:	44 f1       	brlt	.+80     	; 0x97a <main+0x25c>
			k2held++;
 92a:	40 91 11 20 	lds	r20, 0x2011	; 0x802011 <k2held>
 92e:	50 91 12 20 	lds	r21, 0x2012	; 0x802012 <k2held+0x1>
 932:	4f 5f       	subi	r20, 0xFF	; 255
 934:	5f 4f       	sbci	r21, 0xFF	; 255
 936:	40 93 11 20 	sts	0x2011, r20	; 0x802011 <k2held>
 93a:	50 93 12 20 	sts	0x2012, r21	; 0x802012 <k2held+0x1>
			if(k2held%20 == 1 && global_intensity > 1){
 93e:	9a 01       	movw	r18, r20
 940:	ad ec       	ldi	r26, 0xCD	; 205
 942:	bc ec       	ldi	r27, 0xCC	; 204
 944:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 948:	92 95       	swap	r25
 94a:	82 95       	swap	r24
 94c:	8f 70       	andi	r24, 0x0F	; 15
 94e:	89 27       	eor	r24, r25
 950:	9f 70       	andi	r25, 0x0F	; 15
 952:	89 27       	eor	r24, r25
 954:	64 e1       	ldi	r22, 0x14	; 20
 956:	68 9f       	mul	r22, r24
 958:	90 01       	movw	r18, r0
 95a:	69 9f       	mul	r22, r25
 95c:	30 0d       	add	r19, r0
 95e:	11 24       	eor	r1, r1
 960:	42 1b       	sub	r20, r18
 962:	53 0b       	sbc	r21, r19
 964:	41 30       	cpi	r20, 0x01	; 1
 966:	51 05       	cpc	r21, r1
 968:	61 f4       	brne	.+24     	; 0x982 <main+0x264>
 96a:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <global_intensity>
 96e:	82 30       	cpi	r24, 0x02	; 2
 970:	40 f0       	brcs	.+16     	; 0x982 <main+0x264>
				global_intensity--;
 972:	81 50       	subi	r24, 0x01	; 1
 974:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <global_intensity>
 978:	04 c0       	rjmp	.+8      	; 0x982 <main+0x264>
			}
		}else{
			k2held = 0;
 97a:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <k2held>
 97e:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <k2held+0x1>
		}		
		
		PORTQ_OUTSET = 0x02;
 982:	82 e0       	ldi	r24, 0x02	; 2
 984:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
							
		
		if(k1held > 600 || k2held > 600){
 988:	80 91 13 20 	lds	r24, 0x2013	; 0x802013 <k1held>
 98c:	90 91 14 20 	lds	r25, 0x2014	; 0x802014 <k1held+0x1>
 990:	89 35       	cpi	r24, 0x59	; 89
 992:	92 40       	sbci	r25, 0x02	; 2
 994:	40 f4       	brcc	.+16     	; 0x9a6 <main+0x288>
 996:	80 91 11 20 	lds	r24, 0x2011	; 0x802011 <k2held>
 99a:	90 91 12 20 	lds	r25, 0x2012	; 0x802012 <k2held+0x1>
 99e:	89 35       	cpi	r24, 0x59	; 89
 9a0:	92 40       	sbci	r25, 0x02	; 2
 9a2:	08 f4       	brcc	.+2      	; 0x9a6 <main+0x288>
 9a4:	df ce       	rjmp	.-578    	; 0x764 <main+0x46>
			global_intensity = 1;
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <global_intensity>
			PORTQ_OUTCLR = 0x02;
 9ac:	82 e0       	ldi	r24, 0x02	; 2
 9ae:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
			while((PORTQ_IN & 0x01) == 0 || (PORTA_IN & 0x80) == 0){}
 9b2:	88 81       	ld	r24, Y
 9b4:	80 ff       	sbrs	r24, 0
 9b6:	fd cf       	rjmp	.-6      	; 0x9b2 <main+0x294>
 9b8:	f7 01       	movw	r30, r14
 9ba:	80 81       	ld	r24, Z
 9bc:	88 23       	and	r24, r24
 9be:	cc f7       	brge	.-14     	; 0x9b2 <main+0x294>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9c0:	ff e3       	ldi	r31, 0x3F	; 63
 9c2:	2d e0       	ldi	r18, 0x0D	; 13
 9c4:	33 e0       	ldi	r19, 0x03	; 3
 9c6:	f1 50       	subi	r31, 0x01	; 1
 9c8:	20 40       	sbci	r18, 0x00	; 0
 9ca:	30 40       	sbci	r19, 0x00	; 0
 9cc:	e1 f7       	brne	.-8      	; 0x9c6 <main+0x2a8>
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <main+0x2b2>
 9d0:	00 00       	nop
			_delay_ms(500);
			sei();
 9d2:	78 94       	sei
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 9d4:	e8 e4       	ldi	r30, 0x48	; 72
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	80 81       	ld	r24, Z
 9da:	81 7f       	andi	r24, 0xF1	; 241
 9dc:	84 60       	ori	r24, 0x04	; 4
 9de:	80 83       	st	Z, r24
			sleep_mode();
 9e0:	80 81       	ld	r24, Z
 9e2:	81 60       	ori	r24, 0x01	; 1
 9e4:	80 83       	st	Z, r24
 9e6:	88 95       	sleep
 9e8:	80 81       	ld	r24, Z
 9ea:	8e 7f       	andi	r24, 0xFE	; 254
 9ec:	80 83       	st	Z, r24
 9ee:	ba ce       	rjmp	.-652    	; 0x764 <main+0x46>

000009f0 <__divmodhi4>:
 9f0:	97 fb       	bst	r25, 7
 9f2:	07 2e       	mov	r0, r23
 9f4:	16 f4       	brtc	.+4      	; 0x9fa <__divmodhi4+0xa>
 9f6:	00 94       	com	r0
 9f8:	07 d0       	rcall	.+14     	; 0xa08 <__divmodhi4_neg1>
 9fa:	77 fd       	sbrc	r23, 7
 9fc:	09 d0       	rcall	.+18     	; 0xa10 <__divmodhi4_neg2>
 9fe:	0e 94 1b 05 	call	0xa36	; 0xa36 <__udivmodhi4>
 a02:	07 fc       	sbrc	r0, 7
 a04:	05 d0       	rcall	.+10     	; 0xa10 <__divmodhi4_neg2>
 a06:	3e f4       	brtc	.+14     	; 0xa16 <__divmodhi4_exit>

00000a08 <__divmodhi4_neg1>:
 a08:	90 95       	com	r25
 a0a:	81 95       	neg	r24
 a0c:	9f 4f       	sbci	r25, 0xFF	; 255
 a0e:	08 95       	ret

00000a10 <__divmodhi4_neg2>:
 a10:	70 95       	com	r23
 a12:	61 95       	neg	r22
 a14:	7f 4f       	sbci	r23, 0xFF	; 255

00000a16 <__divmodhi4_exit>:
 a16:	08 95       	ret

00000a18 <__umulhisi3>:
 a18:	a2 9f       	mul	r26, r18
 a1a:	b0 01       	movw	r22, r0
 a1c:	b3 9f       	mul	r27, r19
 a1e:	c0 01       	movw	r24, r0
 a20:	a3 9f       	mul	r26, r19
 a22:	70 0d       	add	r23, r0
 a24:	81 1d       	adc	r24, r1
 a26:	11 24       	eor	r1, r1
 a28:	91 1d       	adc	r25, r1
 a2a:	b2 9f       	mul	r27, r18
 a2c:	70 0d       	add	r23, r0
 a2e:	81 1d       	adc	r24, r1
 a30:	11 24       	eor	r1, r1
 a32:	91 1d       	adc	r25, r1
 a34:	08 95       	ret

00000a36 <__udivmodhi4>:
 a36:	aa 1b       	sub	r26, r26
 a38:	bb 1b       	sub	r27, r27
 a3a:	51 e1       	ldi	r21, 0x11	; 17
 a3c:	07 c0       	rjmp	.+14     	; 0xa4c <__udivmodhi4_ep>

00000a3e <__udivmodhi4_loop>:
 a3e:	aa 1f       	adc	r26, r26
 a40:	bb 1f       	adc	r27, r27
 a42:	a6 17       	cp	r26, r22
 a44:	b7 07       	cpc	r27, r23
 a46:	10 f0       	brcs	.+4      	; 0xa4c <__udivmodhi4_ep>
 a48:	a6 1b       	sub	r26, r22
 a4a:	b7 0b       	sbc	r27, r23

00000a4c <__udivmodhi4_ep>:
 a4c:	88 1f       	adc	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	5a 95       	dec	r21
 a52:	a9 f7       	brne	.-22     	; 0xa3e <__udivmodhi4_loop>
 a54:	80 95       	com	r24
 a56:	90 95       	com	r25
 a58:	bc 01       	movw	r22, r24
 a5a:	cd 01       	movw	r24, r26
 a5c:	08 95       	ret

00000a5e <do_rand>:
 a5e:	8f 92       	push	r8
 a60:	9f 92       	push	r9
 a62:	af 92       	push	r10
 a64:	bf 92       	push	r11
 a66:	cf 92       	push	r12
 a68:	df 92       	push	r13
 a6a:	ef 92       	push	r14
 a6c:	ff 92       	push	r15
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	ec 01       	movw	r28, r24
 a74:	68 81       	ld	r22, Y
 a76:	79 81       	ldd	r23, Y+1	; 0x01
 a78:	8a 81       	ldd	r24, Y+2	; 0x02
 a7a:	9b 81       	ldd	r25, Y+3	; 0x03
 a7c:	61 15       	cp	r22, r1
 a7e:	71 05       	cpc	r23, r1
 a80:	81 05       	cpc	r24, r1
 a82:	91 05       	cpc	r25, r1
 a84:	21 f4       	brne	.+8      	; 0xa8e <do_rand+0x30>
 a86:	64 e2       	ldi	r22, 0x24	; 36
 a88:	79 ed       	ldi	r23, 0xD9	; 217
 a8a:	8b e5       	ldi	r24, 0x5B	; 91
 a8c:	97 e0       	ldi	r25, 0x07	; 7
 a8e:	2d e1       	ldi	r18, 0x1D	; 29
 a90:	33 ef       	ldi	r19, 0xF3	; 243
 a92:	41 e0       	ldi	r20, 0x01	; 1
 a94:	50 e0       	ldi	r21, 0x00	; 0
 a96:	0e 94 89 05 	call	0xb12	; 0xb12 <__divmodsi4>
 a9a:	49 01       	movw	r8, r18
 a9c:	5a 01       	movw	r10, r20
 a9e:	9b 01       	movw	r18, r22
 aa0:	ac 01       	movw	r20, r24
 aa2:	a7 ea       	ldi	r26, 0xA7	; 167
 aa4:	b1 e4       	ldi	r27, 0x41	; 65
 aa6:	0e 94 a8 05 	call	0xb50	; 0xb50 <__muluhisi3>
 aaa:	6b 01       	movw	r12, r22
 aac:	7c 01       	movw	r14, r24
 aae:	ac ee       	ldi	r26, 0xEC	; 236
 ab0:	b4 ef       	ldi	r27, 0xF4	; 244
 ab2:	a5 01       	movw	r20, r10
 ab4:	94 01       	movw	r18, r8
 ab6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__mulohisi3>
 aba:	dc 01       	movw	r26, r24
 abc:	cb 01       	movw	r24, r22
 abe:	8c 0d       	add	r24, r12
 ac0:	9d 1d       	adc	r25, r13
 ac2:	ae 1d       	adc	r26, r14
 ac4:	bf 1d       	adc	r27, r15
 ac6:	b7 ff       	sbrs	r27, 7
 ac8:	03 c0       	rjmp	.+6      	; 0xad0 <do_rand+0x72>
 aca:	01 97       	sbiw	r24, 0x01	; 1
 acc:	a1 09       	sbc	r26, r1
 ace:	b0 48       	sbci	r27, 0x80	; 128
 ad0:	88 83       	st	Y, r24
 ad2:	99 83       	std	Y+1, r25	; 0x01
 ad4:	aa 83       	std	Y+2, r26	; 0x02
 ad6:	bb 83       	std	Y+3, r27	; 0x03
 ad8:	9f 77       	andi	r25, 0x7F	; 127
 ada:	df 91       	pop	r29
 adc:	cf 91       	pop	r28
 ade:	ff 90       	pop	r15
 ae0:	ef 90       	pop	r14
 ae2:	df 90       	pop	r13
 ae4:	cf 90       	pop	r12
 ae6:	bf 90       	pop	r11
 ae8:	af 90       	pop	r10
 aea:	9f 90       	pop	r9
 aec:	8f 90       	pop	r8
 aee:	08 95       	ret

00000af0 <rand_r>:
 af0:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <do_rand>

00000af4 <rand>:
 af4:	80 e0       	ldi	r24, 0x00	; 0
 af6:	90 e2       	ldi	r25, 0x20	; 32
 af8:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <do_rand>

00000afc <srand>:
 afc:	a0 e0       	ldi	r26, 0x00	; 0
 afe:	b0 e0       	ldi	r27, 0x00	; 0
 b00:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 b04:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 b08:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
 b0c:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
 b10:	08 95       	ret

00000b12 <__divmodsi4>:
 b12:	05 2e       	mov	r0, r21
 b14:	97 fb       	bst	r25, 7
 b16:	1e f4       	brtc	.+6      	; 0xb1e <__divmodsi4+0xc>
 b18:	00 94       	com	r0
 b1a:	0e 94 a0 05 	call	0xb40	; 0xb40 <__negsi2>
 b1e:	57 fd       	sbrc	r21, 7
 b20:	07 d0       	rcall	.+14     	; 0xb30 <__divmodsi4_neg2>
 b22:	0e 94 bb 05 	call	0xb76	; 0xb76 <__udivmodsi4>
 b26:	07 fc       	sbrc	r0, 7
 b28:	03 d0       	rcall	.+6      	; 0xb30 <__divmodsi4_neg2>
 b2a:	4e f4       	brtc	.+18     	; 0xb3e <__divmodsi4_exit>
 b2c:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__negsi2>

00000b30 <__divmodsi4_neg2>:
 b30:	50 95       	com	r21
 b32:	40 95       	com	r20
 b34:	30 95       	com	r19
 b36:	21 95       	neg	r18
 b38:	3f 4f       	sbci	r19, 0xFF	; 255
 b3a:	4f 4f       	sbci	r20, 0xFF	; 255
 b3c:	5f 4f       	sbci	r21, 0xFF	; 255

00000b3e <__divmodsi4_exit>:
 b3e:	08 95       	ret

00000b40 <__negsi2>:
 b40:	90 95       	com	r25
 b42:	80 95       	com	r24
 b44:	70 95       	com	r23
 b46:	61 95       	neg	r22
 b48:	7f 4f       	sbci	r23, 0xFF	; 255
 b4a:	8f 4f       	sbci	r24, 0xFF	; 255
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	08 95       	ret

00000b50 <__muluhisi3>:
 b50:	0e 94 0c 05 	call	0xa18	; 0xa18 <__umulhisi3>
 b54:	a5 9f       	mul	r26, r21
 b56:	90 0d       	add	r25, r0
 b58:	b4 9f       	mul	r27, r20
 b5a:	90 0d       	add	r25, r0
 b5c:	a4 9f       	mul	r26, r20
 b5e:	80 0d       	add	r24, r0
 b60:	91 1d       	adc	r25, r1
 b62:	11 24       	eor	r1, r1
 b64:	08 95       	ret

00000b66 <__mulshisi3>:
 b66:	b7 ff       	sbrs	r27, 7
 b68:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__muluhisi3>

00000b6c <__mulohisi3>:
 b6c:	0e 94 a8 05 	call	0xb50	; 0xb50 <__muluhisi3>
 b70:	82 1b       	sub	r24, r18
 b72:	93 0b       	sbc	r25, r19
 b74:	08 95       	ret

00000b76 <__udivmodsi4>:
 b76:	a1 e2       	ldi	r26, 0x21	; 33
 b78:	1a 2e       	mov	r1, r26
 b7a:	aa 1b       	sub	r26, r26
 b7c:	bb 1b       	sub	r27, r27
 b7e:	fd 01       	movw	r30, r26
 b80:	0d c0       	rjmp	.+26     	; 0xb9c <__udivmodsi4_ep>

00000b82 <__udivmodsi4_loop>:
 b82:	aa 1f       	adc	r26, r26
 b84:	bb 1f       	adc	r27, r27
 b86:	ee 1f       	adc	r30, r30
 b88:	ff 1f       	adc	r31, r31
 b8a:	a2 17       	cp	r26, r18
 b8c:	b3 07       	cpc	r27, r19
 b8e:	e4 07       	cpc	r30, r20
 b90:	f5 07       	cpc	r31, r21
 b92:	20 f0       	brcs	.+8      	; 0xb9c <__udivmodsi4_ep>
 b94:	a2 1b       	sub	r26, r18
 b96:	b3 0b       	sbc	r27, r19
 b98:	e4 0b       	sbc	r30, r20
 b9a:	f5 0b       	sbc	r31, r21

00000b9c <__udivmodsi4_ep>:
 b9c:	66 1f       	adc	r22, r22
 b9e:	77 1f       	adc	r23, r23
 ba0:	88 1f       	adc	r24, r24
 ba2:	99 1f       	adc	r25, r25
 ba4:	1a 94       	dec	r1
 ba6:	69 f7       	brne	.-38     	; 0xb82 <__udivmodsi4_loop>
 ba8:	60 95       	com	r22
 baa:	70 95       	com	r23
 bac:	80 95       	com	r24
 bae:	90 95       	com	r25
 bb0:	9b 01       	movw	r18, r22
 bb2:	ac 01       	movw	r20, r24
 bb4:	bd 01       	movw	r22, r26
 bb6:	cf 01       	movw	r24, r30
 bb8:	08 95       	ret

00000bba <_exit>:
 bba:	f8 94       	cli

00000bbc <__stop_program>:
 bbc:	ff cf       	rjmp	.-2      	; 0xbbc <__stop_program>
